<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on Yuxuan Huang</title>
    <link>/yxhuang.github.io/categories/hugo/</link>
    <description>Recent content in hugo on Yuxuan Huang</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Yuxuan Huang, {year}</copyright>
    <lastBuildDate>Mon, 04 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/yxhuang.github.io/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Spoonful of Hugo: Troubleshooting Your Build</title>
      <link>/yxhuang.github.io/post/2019-03-04-hugo-troubleshooting/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/yxhuang.github.io/post/2019-03-04-hugo-troubleshooting/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#update-hugo&#34;&gt;#1: Update Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#change-the-baseurl&#34;&gt;#2: Change the baseurl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#netlify-drag-and-drop&#34;&gt;#3: Netlify drag-and-drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#torch-public&#34;&gt;#4: Torch &lt;code&gt;public/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peruse-public&#34;&gt;#5: Peruse &lt;code&gt;public/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dates&#34;&gt;#6: Back to the future&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;“Just a spoonful of Hugo helps the blog go down.”
- me, only somewhat kidding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site &lt;em&gt;UP&lt;/em&gt; (and even better- more efficient, more streamlined, more automated). You can read the previous posts about my “Spoonful of Hugo” series &lt;a href=&#34;/yxhuang.github.io/post/2019-02-19-hugo-archetypes/&#34;&gt;about Hugo archetypes&lt;/a&gt;, &lt;a href=&#34;/yxhuang.github.io/post/2019-02-19-hugo-netlify-toml/&#34;&gt;Hugo versions&lt;/a&gt;, and &lt;a href=&#34;/yxhuang.github.io/post/2019-02-21-hugo-page-bundles/&#34;&gt;Hugo page bundles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following are a few steps that I always start with to troubleshoot any blogdown/Hugo/Netlify problems. These steps would solve what I would anecdotally estimate as ~50% of blogdown problems that I see posted in the &lt;a href=&#34;https://github.com/rstudio/blogdown/issues&#34;&gt;GitHub repository&lt;/a&gt; and on the &lt;a href=&#34;https://community.rstudio.com/tags/blogdown&#34;&gt;community site&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;update-hugo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#1: Update Hugo&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://media.giphy.com/media/syCa5ird7wp0c/giphy.gif&#34; alt=&#34;Don&#39;t be like this&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Don’t be like this
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If things have gone south and you are getting Hugo errors when you use the “Serve Site” Addin locally, it is possible that you need to update your version of Hugo. From R, you can check your Hugo version with blogdown:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can reference your &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt; to find the minimum version of Hugo required by your theme:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;hugo-min-version.png&#34; alt=&#34;Check your theme&#39;s minimum Hugo version&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Check your theme’s minimum Hugo version
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can go higher than the minimum version though, so it’s good practice to update your Hugo, again from within R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown:: update_hugo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your version again post-update:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;#39;0.59.0&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using Netlify to build your site using Hugo, you’ll want this version to match that- the best way to do that is with a &lt;a href=&#34;/yxhuang.github.io/post/2019-02-19-hugo-netlify-toml/&#34;&gt;netlify.toml file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;change-the-baseurl&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#2: Change the baseurl&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/zG6MKhlBxIloc/giphy.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Open up your &lt;code&gt;config.toml&lt;/code&gt; file and look for the &lt;code&gt;baseurl&lt;/code&gt; field, usually pretty close to the top. Here is mine&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;toml&#34;&gt;&lt;code&gt;baseurl = &amp;quot;https://alison.rbind.io&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you are just starting with Hugo and don’t &lt;em&gt;actually&lt;/em&gt; have a domain name yet, try taking the advice that blogdown automatically prints out for you:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: You should change the &amp;quot;baseurl&amp;quot; option in config.toml 
from https://example.org to your actual domain; 
if you do not have a domain, set &amp;quot;baseurl&amp;quot; to &amp;quot;/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But be careful here- you shouldn’t leave it as “/”- once you do have your domain name you should update the baseurl as “/” is a not a valid URL.&lt;/p&gt;
&lt;div id=&#34;care-to-know-more&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Care to know more?&lt;/h2&gt;
&lt;p&gt;Here is a quote from the person who writes the Hugo docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“…the only purpose for the baseurl field in the config is to define the full base URL of your website for deployment purposes.” - @&lt;a href=&#34;https://discourse.gohugo.io/t/how-not-to-specify-url-site/5691/7&#34;&gt;rdwatters&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main error that would happen without the trailing slash in the past is that you would end up with a site where the theme’s CSS would be all wrong. This was probably because the theme designer used code like this buried in a layout file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}css/style.css&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you set &lt;code&gt;baseurl = &#34;http://mysite.com&#34;&lt;/code&gt; but only rendered locally, things would look just peachy, because the default local server already included the trailing slash. So, the link in the html file would be&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://localhost:1313/css/style.css&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, at build, the link in the html file would turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://mysite.comcss/style.css&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which creates sites that look like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-7&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/47527626/52856178-f37a3680-3123-11e9-9b26-6500efac7404.png&#34; alt=&#34;Hugo tranquil peak theme&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: Hugo tranquil peak theme
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/369&#34;&gt;GitHub issue #369&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-8&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/18710907/27711864-820dc59a-5cf2-11e7-99c8-b9b7e7f46ab3.png&#34; alt=&#34;Hugo universal theme&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: Hugo universal theme
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/131&#34;&gt;GitHub issue #131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/4596214/26549134/7e3968fe-4445-11e7-90b1-87dd4ac2c1c0.png&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/114&#34;&gt;GitHub issue #114&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, Hugo authors and theme developers have largely been moving towards using relative URLs instead of the baseurl to build paths. This was based on public advice voiced by the Hugo authors on the discourse forum. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The recommended way to reference resources is to use either relURL or absURL template funcs, which handles the slash issues.”- @&lt;a href=&#34;https://discourse.gohugo.io/t/0-19-to-0-30-2-baseurl-forward-slash-is-required/9206&#34;&gt;bep&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following that advice, a more up-to-date theme would have code that looks like this buried in a layout file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ &amp;quot;css/style.css&amp;quot; | relURL }}&amp;quot;/&amp;gt;  → &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bottom line? If your theme uses &lt;code&gt;relURL&lt;/code&gt; or &lt;code&gt;absURL&lt;/code&gt; to link to site resources like CSS, JavaScript, or static images, then whether or not you include a trailing slash in your baseurl should not matter at all.&lt;/p&gt;
&lt;p&gt;And here is some tough love about your theme: if the most recent version &lt;em&gt;does&lt;/em&gt; still require the trailing slash in the &lt;code&gt;baseurl&lt;/code&gt; to “work” out of the box, I would seriously consider switching themes. This is a pretty good “canary in the coal mine” test regarding how up-to-date the theme author is, and how well the theme you have chosen adheres to Hugo templating best practices. If you are having pain with this now, it is likely not the only thing that will be painful about working with your theme.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;netlify-drag-and-drop&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#3: Netlify drag-and-drop&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/DfbpTbQ9TvSX6/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you can render your site locally but your published site looks different, try the drag-and-drop method:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://arm.rbind.io/slides/img/netlify-new-site.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use the “Serve Site” Addin, then drag-and-drop the &lt;code&gt;public/&lt;/code&gt; folder straight into Netlify. What does this do? You can now see your public site…that you built…with your local version of Hugo. Netlify is doing none of the site building here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yxhuang.github.io/yxhuang.github.iopost/2019-03-04-hugo-troubleshooting/index_files/figure-html/unnamed-chunk-10-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;One of the first benefits of this approach is that it ensures that you are able to actually &lt;em&gt;generate&lt;/em&gt; a &lt;code&gt;public/&lt;/code&gt; folder locally! I have seen folks struggle to deploy the wrong repo. This simple step can force you to make sure to use the “Serve Site” Addin to generate the &lt;code&gt;public/&lt;/code&gt; folder, and that the repo you are trying to link to Netlify actually contains a Hugo site because you must physically move the &lt;code&gt;public/&lt;/code&gt; folder. But this method can also help you diagnose other problems too.&lt;/p&gt;
&lt;p&gt;If your &lt;code&gt;public/&lt;/code&gt; folder &lt;strong&gt;does not render&lt;/strong&gt; on Netlify, you have work to do locally. I can’t tell you what it is as it can be a number of things, but you can be sure that your problem is not just the Netlify build- it is your local build too.&lt;/p&gt;
&lt;p&gt;If your &lt;code&gt;public/&lt;/code&gt; folder &lt;strong&gt;does render&lt;/strong&gt; perfectly on Netlify, but you are getting a Netlify build error, then you likely have a Hugo version problem. It might be that the version you are running locally is more recent than the version run by Netlify by default to actually build your site. The good news is there is a quick fix for this! The solution is to upgrade the Hugo version Netlify is using- see my advice &lt;a href=&#34;/yxhuang.github.io/post/2019-02-19-hugo-netlify-toml/&#34;&gt;here for how to do that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are happy with how your site looks but you are missing content and/or seeing old deleted content, then you may need the next few strategies to troubleshoot.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;torch-public&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#4: Torch &lt;code&gt;public/&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/YA6dmVW0gfIw8/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When you are seeing very weird things locally, try deleting your local &lt;code&gt;public/&lt;/code&gt; folder. Then serve site again. Sometimes it can get “junked up”. I’ve found that sometimes deleted content can be a &lt;a href=&#34;https://community.rstudio.com/t/deleted-blog-post-still-showing-up-on-blogdown-website-in-index-html/14107&#34;&gt;little sticky&lt;/a&gt;. As recommended in the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/local-preview.html&#34;&gt;blogdown book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“you are strongly recommended to delete the &lt;code&gt;/public/&lt;/code&gt; directory before you rebuild the site for publishing every time, because Hugo never deletes it”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also, this has a bonus of reinforcing for you exactly what the “Serve Site” Addin &lt;em&gt;does&lt;/em&gt; - it regenerates the &lt;code&gt;public/&lt;/code&gt; folder. This is also the folder that, if you are using &lt;a href=&#34;post/2019-02-19-hugo-netlify-toml/&#34;&gt;Netlify to build your site&lt;/a&gt;, is in your &lt;code&gt;.gitignore&lt;/code&gt; file because Netlify (+ Hugo) generates this file “fresh” with each push to your GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yxhuang.github.io/yxhuang.github.iopost/2019-03-04-hugo-troubleshooting/index_files/figure-html/unnamed-chunk-11-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;peruse-public&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#5: Peruse &lt;code&gt;public/&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/NS7gPxeumewkWDOIxi/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When you notice weird things, try actually looking inside &lt;code&gt;public/&lt;/code&gt;- don’t be afraid to spelunk around in there! If you are seeing something wrong with your site, try to figure out how blogdown/Hugo is processing and rendering your content. This folder can tell you a lot! Keep in mind that your local &lt;code&gt;public/&lt;/code&gt; folder will still contain &lt;a href=&#34;#dates&#34;&gt;future/draft/expired content&lt;/a&gt; if you used the “Serve Site” Addin.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;#6: Back to the future&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-12&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://media.giphy.com/media/ek6obDm0IwjNm/giphy.gif&#34; alt=&#34;Where are my posts?&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 5: Where are my posts?
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If your site renders beautifully locally, and your drag-and-drop site from &lt;code&gt;public/&lt;/code&gt; looks the same, but you are missing key content when you actually deploy to Netlify using a Hugo build, you may have inadvertently stumbled into a Hugo date time warp. This is a fairly &lt;a href=&#34;https://community.rstudio.com/t/serve-site-working-but-posts-dont-show-up-on-github-io/11254/3&#34;&gt;common gotcha&lt;/a&gt;. Try using the drag-and-drop method again, this time first delete &lt;code&gt;public/&lt;/code&gt;, then instead of using the “Serve Site” Addin, run this in your console:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::build_site(local = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plop this &lt;em&gt;new&lt;/em&gt; public folder in Netlify to see what your site will look like when it is actually published. What does this show you? Your local Hugo build (read: your &lt;code&gt;public/&lt;/code&gt; folder generated by “Serve Site”) differs &lt;em&gt;by design&lt;/em&gt; in 3 important ways from your deployed site built by Netlify/Hugo. By default, &lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34;&gt;Hugo will not publish&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Content with a future &lt;code&gt;publishDate&lt;/code&gt; value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content with &lt;code&gt;draft: true&lt;/code&gt; status&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content with a past &lt;code&gt;expiryDate&lt;/code&gt; value&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that these are &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;defaults&lt;/a&gt;. The behavior of the “Serve Site” Addin is also documented in the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/local-preview.html&#34;&gt;blogdown book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“This is for you to preview draft and future posts locally.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Blogdown’s &lt;code&gt;build_site(local = FALSE)&lt;/code&gt; differs from the “Serve Site” Addin in that it &lt;em&gt;will not&lt;/em&gt; render draft, future, or expired content. So your &lt;code&gt;public/&lt;/code&gt; folder from &lt;code&gt;build_site(local = FALSE)&lt;/code&gt; shows you &lt;strong&gt;exactly&lt;/strong&gt; what Netlify &lt;strong&gt;should&lt;/strong&gt; publish. Seeing it can help you troubleshoot why some content was showing up locally but not when you publish.&lt;/p&gt;
&lt;p&gt;The defaults are pretty sensible and nice to have, as you can still put these kinds of content under version control, and hence collaborate with other team members on the content without having the content publish (or expire) until you &lt;strong&gt;say so&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To show content that Hugo was hiding, you’ll want to edit some YAML fields in the individual offending content files. For example, in the YAML of an individual content file (like a blog post), if you want to un-draft it, add or change this key/value:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;title: &amp;#39;A Spoonful of Hugo: Troubleshooting your Build&amp;#39;
author: &amp;quot;Alison Hill&amp;quot;
date: &amp;#39;2019-03-04&amp;#39;
draft: false&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, if you want to date something in the future (like to advertise the date of an upcoming talk) but publish now, you can use the &lt;code&gt;publishDate&lt;/code&gt; field. The &lt;code&gt;publishDate&lt;/code&gt; field is a newer addition to Hugo (&amp;gt;= v0.54.0) which, if left unset, will default to the &lt;code&gt;date&lt;/code&gt; field, which means in the individual content file YAML you can do:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;title: &amp;#39;A Spoonful of Hugo: Get excited!!&amp;#39;
author: &amp;quot;Alison Hill&amp;quot;
date: &amp;#39;2025-03-04&amp;#39;
publishDate: &amp;#39;2019-03-04&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully these 6 things can help you get unstuck. If not, the &lt;a href=&#34;https://community.rstudio.com/tags/blogdown&#34;&gt;RStudio community forums&lt;/a&gt; are a great place to ask questions!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Yes that’s right, I don’t have a trailing slash- read on for why I can get away with this.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/how-not-to-specify-url-site/5691/5&#34; class=&#34;uri&#34;&gt;https://discourse.gohugo.io/t/how-not-to-specify-url-site/5691/5&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
